public class GFG {
	static public void Main () {
		int cases = int.Parse(Console.ReadLine());
            GFG wt = new GFG();
            int[] results = new int[cases];
            for (int i = 0; i < cases; i++)
            {
                int arraySize = int.Parse(Console.ReadLine());
                string[] arrayStr = Console.ReadLine().Split(' ');
                int[] array = new int[arraySize];
                for (int j = 0; j < arraySize; j++)
                {
                    array[j] = int.Parse(arrayStr[j]);
                }
               results[i] = wt.RunAlgo(array);
            }
            for (int i = 0; i < cases; i++)
            {
                Console.WriteLine(results[i]);
            }
	}
	public int RunAlgo(int[] array)
        {
            int waterUnits = 0;
            if (array.Length < 3)
                return 0;
            for (int i = 1; i < (array.Length - 1); i++)
            {
                //Finding max value on left side
                int lMax = array[i-1];
                if (i >= 2)
                {
                    for (int j = i - 2; j > -1; j--)
                    {
                        if (array[j] > lMax)
                            lMax = array[j];
                    }
                }

                int rMax = array[i + 1];
                if (i < array.Length - 2)
                {
                    for (int k = i+2; k < array.Length; k++)
                    {
                        if (array[k] > rMax)
                            rMax = array[k];
                    }
                }

                int boundryForEquilibrium = 0;
                if (lMax < rMax && array[i] < lMax)
                    boundryForEquilibrium = lMax;
                else if (rMax < lMax && array[i] < rMax)
                    boundryForEquilibrium = rMax;
                else if (lMax == rMax && array[i] < lMax)
                    boundryForEquilibrium = lMax;

                if (boundryForEquilibrium > 0)
                    waterUnits += boundryForEquilibrium - array[i];
            }
            return waterUnits;
        }
}
